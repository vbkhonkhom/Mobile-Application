import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class AddDeviceScreen extends StatefulWidget {
  const AddDeviceScreen({super.key});

  @override
  State<AddDeviceScreen> createState() => _AddDeviceScreenState();
}

class _AddDeviceScreenState extends State<AddDeviceScreen> {
  final TextEditingController _serialController = TextEditingController();

  Future<void> saveToFirestore(String serial) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) return;

    final serialRef = FirebaseFirestore.instance.collection('Raspberry_pi').doc(serial);
    final serialDoc = await serialRef.get();

    if (!serialDoc.exists) {
      _showMessage("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
      return;
    }

    final data = serialDoc.data()!;
    final currentStatus = data['status'];
    final currentOwnerId = data['ownerId'];
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ timestamp ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    final hasTimestamp = data.containsKey('timestamp');

    if (currentStatus == 'To be Added') {
      // ‚úÖ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
      await serialRef.update({
        'status': 'online',
        'ownerId': user.uid,
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° timestamp ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ timestamp
        if (!hasTimestamp) 'timestamp': FieldValue.serverTimestamp(),
      });

      Navigator.pop(context, serial); // ‚úÖ ‡∏™‡πà‡∏á serial ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ homepage
    } else if (currentStatus == 'online') {
      if (currentOwnerId == user.uid) {
        Navigator.pop(context, serial); // ‚úÖ ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ã‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡∏ú‡πà‡∏≤‡∏ô
      } else {
        _showMessage("‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÅ‡∏•‡πâ‡∏ß");
      }
    } else {
      _showMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ");
    }
  }

  void _showMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text(message)));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SafeArea(
        child: Column(
          children: [
            // üîô ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            Padding(
              padding: const EdgeInsets.all(20),
              child: Align(
                alignment: Alignment.topLeft,
                child: GestureDetector(
                  onTap: () => Navigator.pop(context),
                  child: const Icon(Icons.arrow_back, color: Color(0xFF263F6B)),
                ),
              ),
            ),
            const Text(
              "Serial ID",
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 20),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 32),
              child: TextField(
                controller: _serialController,
                decoration: InputDecoration(
                  hintText: "‡∏Å‡∏£‡∏≠‡∏Å Serial ID",
                  filled: true,
                  fillColor: Colors.blue[100],
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(12),
                  ),
                ),
              ),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              style: ElevatedButton.styleFrom(backgroundColor: const Color(0xFF263F6B)),
              onPressed: () async {
                final serial = _serialController.text.trim();
                if (serial.isNotEmpty) {
                  await saveToFirestore(serial);
                } else {
                  _showMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å Serial ID");
                }
              },
              child: const Text("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", style: TextStyle(color: Colors.white)),
            ),
          ],
        ),
      ),
    );
  }
}